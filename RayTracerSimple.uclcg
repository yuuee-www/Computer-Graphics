// filename: cw1_student.uclcg
// tabGroup: Coursework
// thumbnail: cw1_thumb.png
// displayname: Coursework 1 - 2021/2022
// shortDescription: Coursework 1 - Ray Tracing
// author: None
// isHidden: false 
function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 100000;
	UI.maxFPS = 24;
	UI.renderWidth = 1600;
	UI.renderHeight = 800;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION_REFRACTION
#define SOLUTION_FRESNEL
#define SOLUTION_BOOLEAN

precision highp float;
uniform ivec2 viewport; 

struct PointLight {
	vec3 position;
	vec3 color;
};

struct Material {
	vec3  diffuse;
	vec3  specular;
	float glossiness;
	float reflection;
	float refraction;
	float ior;
};

struct Sphere {
	vec3 position;
	float radius;
	Material material;
};

struct Plane {
	vec3 normal;
	float d;
	Material material;
};

struct Cylinder {
	vec3 position;
	vec3 direction;  
	float radius;
	Material material;
};

#define BOOLEAN_MODE_AND 0			// and 
#define BOOLEAN_MODE_MINUS 1			// minus 

struct Boolean {
    Sphere spheres[2];
    int mode;
};


const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;
const int booleanCount = 2; 

struct Scene {
	vec3 ambient;
	PointLight[lightCount] lights;
	Sphere[sphereCount] spheres;
	Plane[planeCount] planes;
	Cylinder[cylinderCount] cylinders;
    Boolean[booleanCount] booleans;
};

struct Ray {
	vec3 origin;
	vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
	bool hit;
	float t;
	vec3 position;
	vec3 normal;
	Material material;
	bool enteringPrimitive;
};

HitInfo getEmptyHit() {
	return HitInfo(
		false, 
		0.0, 
		vec3(0.0), 
		vec3(0.0), 
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0, 0.0),
		false);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
	// Make t1 the smaller t
	if(t2 < t1)  {
		float temp = t1;
		t1 = t2;
		t2 = temp;
	}
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval.
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
  
	sortT(t0, t1);

	// As t0 is smaller, test this first
	if(isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
		return true;
	}

	// If t0 was not in the interval, still t1 could be
	if(isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  

	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
  
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if(!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
          return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      
		
		//Checking if we're inside the sphere by checking if the ray's origin is inside. If we are, then the normal 
		//at the intersection surface points towards the center. Otherwise, if we are outside the sphere, then the normal 
		//at the intersection surface points outwards from the sphere's center. This is important for refraction.
      	vec3 normal = 
          	length(ray.origin - sphere.position) < sphere.radius + 0.001? 
          	-normalize(hitPosition - sphere.position): 
      		normalize(hitPosition - sphere.position);      
		
		//Checking if we're inside the sphere by checking if the ray's origin is inside,
		// but this time for IOR bookkeeping. 
		//If we are inside, set a flag to say we're leaving. If we are outside, set the flag to say we're entering.
		//This is also important for refraction.
		bool enteringPrimitive = 
          	length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	false:
		    true; 

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material,
			enteringPrimitive);
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// The first step is to check whether the ray will hit the plane. If the ray is parallel to the plane (perpendicular to the normal of the plane), 
	// the hit position will not exit. 
	float a = dot(plane.normal, ray.direction);
	if (a != 0.0){ 
		// the hit position exists -> hit_posiiton = ray.origin + t * ray.direction
		// the distance d to the origin of the ray = dot(hit_position - ray.origin, plane.normal)
		// hit_position - ray.origin = t * ray.direction
		// d = dot((hit_position - ray.origin), plane.normal) -> t = d / (dot(ray.direction, plane.normal))
		float t = plane.d / a;
		// Since there is only one solution t, we just need to check if t is within the range of tMin to tMax.
		if (!isTInInterval(t, tMin, tMax)){
			return getEmptyHit();
			}
		vec3 hitPosition = ray.origin + t * ray.direction;      
		
		// To check whether the ray is below the plane.
		vec3 normal = ray.origin.y > hitPosition.y?
    	plane.normal:-plane.normal;
		bool enteringPrimitive = ray.origin.y > hitPosition.y;

		return HitInfo(
            	true,
            	t,
            	hitPosition,
            	normal,
            	plane.material,
			    enteringPrimitive
  		);	
	}
#endif  
		return getEmptyHit();
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
		// (a,b) means dot(a,b) 
	// va : cylinder.direction
	// pa : cylinder.position
	// s  : ray.origin
	// radius = cylinder.radius
	// Ray : q = s + dt , Cylinder : (q - pa - (va, q - pa)va)^2 - r^2 = 0
	// sustitute q = s + dt , then
    // (s - pa + dt - (va, s - pa + dt)va)^2 - r^2 = 0
    // t is unknown，the format is At^2+Bt+C=0
    // A = (d - (d,va)va)^2
    // B = 2(d - (d,va)va, Δp-(Δp,va)va)
    // C = (Δp - (Δp,va)va)^2 - r^2
    // Δp = s - pa

	vec3 A_part = ray.direction - dot(ray.direction, cylinder.direction) * cylinder.direction; 
	float A = dot(A_part, A_part);
	vec3 delta_p = ray.origin - cylinder.position;
	vec3 B_part = delta_p - dot(delta_p, cylinder.direction) * cylinder.direction;
	float B = 2.0 * dot(A_part, B_part);
	float C = dot(B_part, B_part) - cylinder.radius * cylinder.radius; 
	float discr = B * B - 4.0 * A * C;
	
	if (discr > 0.0)
		{
			float sqrt_discr = sqrt(discr);
            float t0 = (-B - sqrt_discr) / (2.0 * A); 
            float t1 = (-B + sqrt_discr) / (2.0 * A);
			
			float smallestTInInterval;
      	    if(!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
				return getEmptyHit();
            }
			
			vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;
			
			vec3 normal = normalize(hitPosition - (cylinder.position + dot((hitPosition - cylinder.position), cylinder.direction) * cylinder.direction));
		
			bool enteringPrimitive = length(ray.origin - cylinder.position) < cylinder.radius + 0.001;
				
			return HitInfo(
				true,
				smallestTInInterval,
				hitPosition,
				normal,
				cylinder.material,
				enteringPrimitive);;
		}
#endif  
    return getEmptyHit();
}

bool inside(const vec3 position, const Sphere sphere) {
	return length(position - sphere.position) < sphere.radius;
}

HitInfo intersectBoolean(const Ray ray, const Boolean boolean, const float tMin, const float tMax) {
#ifdef SOLUTION_BOOLEAN
	// For the logical and
	// intersection code 
	if (boolean.mode == 0) { 
	Sphere s1 = boolean.spheres[0];
	Sphere s2 = boolean.spheres[1];

	HitInfo Sphere1Hit = intersectSphere(ray, s1, tMin, tMax);
	HitInfo Sphere2Hit = intersectSphere(ray, s2, tMin, tMax);
	
		if (inside((ray.origin+Sphere1Hit.t * ray.direction),s2)) //The points are on s1 and inside s2.
		{
			return Sphere1Hit;
		}
	else if(inside((ray.origin+Sphere2Hit.t * ray.direction),s1)){ //The points are on s2 and inside s1.
		return Sphere2Hit;
	    }
	}
	
	// For minus
	if (boolean.mode == 1) { 
	Sphere s1 = boolean.spheres[0];
	Sphere s2 = boolean.spheres[1];
	

	HitInfo Sphere1Hit;	
	HitInfo Sphere2Hit = intersectSphere(ray, s2, tMin, tMax);
	
	float bigestTInInterval;
	vec3 to_sphere = ray.origin - s1.position;
	float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, to_sphere);
	float c = dot(to_sphere, to_sphere) - s1.radius * s1.radius;
	float D = b * b - 4.0 * a * c;
	if (D > 0.0)
	{
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
		
		sortT(t0, t1);	
		
		if(isTInInterval(t0, tMin, tMax)) {
				bigestTInInterval = t0;
		}
		if(isTInInterval(t1, tMin, tMax)) {
			bigestTInInterval = t1;
		}  		
		
		vec3 hitPosition = ray.origin + bigestTInInterval * ray.direction;
		
		vec3 normal = 
          	length(ray.origin - s1.position) < s1.radius + 0.001? 
          	-normalize(hitPosition - s1.position): 
      		normalize(hitPosition - s1.position);  
		
		bool enteringPrimitive = 
          	length(ray.origin - s1.position) < s1.radius + 0.001 ? 
          	false:
		    true; 
		
		Sphere1Hit = HitInfo(
          	true,
          	bigestTInInterval,
          	hitPosition,
          	-normal, // Because we now use the bigestTInInterval, we need to change the direction of the normal.
          	s1.material,
			enteringPrimitive);
		}

		if (!inside((ray.origin+Sphere2Hit.t * ray.direction),s1)) // The points are on s2 and not inside s1.
		{
			return Sphere2Hit;
		}
		else if (inside((ray.origin+ Sphere1Hit.t * ray.direction),s2)) // The points are on s2 and inside s1.
		{
			return Sphere1Hit;
		}
		
		//The explanation of how I would change the HitInfo structure to be more useful for boolean ops and why:
		// I would add a new parameter (float bigestTInInterval) to the HitInfo.
		// The bigestTInInterval records the time when the ray hits the sphere for the second time.
		// With this change, we can directly get the points, which are on the sphere B and inside the sphere A, by using the
		// bigestTInInterval from the result of calling the intersectSphere function.
		
		//#define explanation
		#ifdef explanation
		struct HitInfo {
			bool hit;
			bool bigestTInInterval;
			float t;
			vec3 position;
			vec3 normal;
			Material material;
			bool enteringPrimitive;
		};
		// For minus
		
		HitInfo Sphere1Hit = intersectSphere(ray, s1, tMin, tMax);
	    HitInfo Sphere2Hit = intersectSphere(ray, s2, tMin, tMax);
		
		if (!inside((ray.origin+Sphere2Hit.t * ray.direction),s1)) // The points are on s2 and not inside s1.
		{
			return Sphere2Hit;
		}
		else if (inside((ray.origin+ Sphere1Hit.bigestTInInterval * ray.direction),s2)) // The points are on s2 and inside s1.
		{
			Sphere1Hit.normal = -Sphere1Hit.normal;
			return Sphere1Hit;
		}
	    #endif
		
		
	}
	
	
#else
    // Put your code for the boolean task in the #ifdef above!
#endif
    return getEmptyHit();
}

uniform float time;

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;


	for (int i = 0; i < booleanCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectBoolean(ray, scene.booleans[i], tMin, tMax));
	}

		for (int i = 0; i < planeCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
		}

		for (int i = 0; i < sphereCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
		}

		for (int i = 0; i < cylinderCount; ++i) {
			bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
		}
	
	return bestHitInfo;
}

vec3 shadeFromLight(
  const Scene scene,
  const Ray ray,
  const HitInfo hit_info,
  const PointLight light)
{ 
  vec3 hitToLight = light.position - hit_info.position;
  
  vec3 lightDirection = normalize(hitToLight);
  vec3 viewDirection = normalize(hit_info.position - ray.origin);
  vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
  float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
  float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
  Ray shadowRay;
  shadowRay.origin = hit_info.position;
  shadowRay.direction = hitToLight;
  HitInfo shadowHitInfo = intersectScene(scene, shadowRay, 0.001, 10000.0);
  float visibility = shadowHitInfo.hit && shadowHitInfo.t > 0.0 && shadowHitInfo.t < length(hitToLight) ?
    0.0 : 1.0;
#else
  // Put your shadow test here
  float visibility = 1.0;
#endif
  return 	visibility * 
    		light.color * (
    		specular_term * hit_info.material.specular +
      		diffuse_term * hit_info.material.diffuse);
}

vec3 background(const Ray ray) {
  // A simple implicit sky that can be used for the background
  return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {
	
  	if(!hitInfo.hit) {
  		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
        shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
  	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(viewport.x, viewport.y);
  	vec3 origin = vec3(0, 0, sensorDistance);
    vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

float fresnel(const vec3 viewDirection, const vec3 normal, const float sourceIOR, const float destIOR) {
#ifdef SOLUTION_FRESNEL
	// Adopt the Schlick's approximation, the Fresnel factor = R0 + (1 - R0)(1 - cos(theta))^5 
	// R0 = ((n_1 - n_2) / (n_1 + n_2))^2 where n is the IOR
	//float n_1 = 1.0; // air
	//float n_2 = 1.6; // glass
	//float R0 = pow((n_1 - n_2)/(n_1+n_2), 2.0);
	float R0 = pow((sourceIOR - destIOR)/(sourceIOR+destIOR), 2.0);
	return R0 + (1.0 - R0) * pow((1.0 - dot(viewDirection, normal)), 5.0);
#else
  	// Put your code to compute the Fresnel effect in the ifdef above
	return 1.0;
#endif
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
    Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
  	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
	
	// The initial medium is air
  	float currentIOR = 1.0;
	
    float sourceIOR = 1.0;
	float destIOR = 1.0;
  	
  	const int maxReflectionStepCount = 2;
  	for(int i = 0; i < maxReflectionStepCount; i++) {
      
      if(!currentHitInfo.hit) break;
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		reflectionWeight *= currentHitInfo.material.reflection;
#else
      // Put your reflection weighting code in the ifdef above
#endif
      
#ifdef SOLUTION_FRESNEL
		//w_reflect = 1 − w_refract.
		reflectionWeight *= fresnel(-currentRay.direction,currentHitInfo.normal,sourceIOR,1.6);
#else
      // Replace with Fresnel code in the ifdef above
      reflectionWeight *= 0.5;
#endif
      
      Ray nextRay;
#ifdef SOLUTION_REFLECTION_REFRACTION
		//-e + 2(<n, e>)n	
		//e is opposite to currentRay's direction -> add "-"
	    vec3 e = -normalize(currentRay.origin + currentHitInfo.t * currentRay.direction);
		vec3 n = normalize(currentHitInfo.normal);
		vec3 r_direction = -e + 2.0 * dot(n, e) * n; 
		vec3 r_origin = currentHitInfo.position;
        nextRay.origin = r_origin;
		nextRay.direction = r_direction;
#else
	// Put your code to compute the reflection ray in the ifdef above
#endif
      currentRay = nextRay;
      
      currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);      
            
      result += reflectionWeight * shade(scene, currentRay, currentHitInfo);
    }
  
  	// Compute the refraction
  	currentRay = initialRay;  
  	currentHitInfo = initialHitInfo;
   
  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
      
#ifdef SOLUTION_REFLECTION_REFRACTION
		refractionWeight *= currentHitInfo.material.refraction;
#else
      // Put your refraction weighting code in the ifdef above
      refractionWeight *= 0.5;      
#endif

#ifdef SOLUTION_FRESNEL
		//w_reflect = 1 − w_refract.
		refractionWeight *= (1.0 - fresnel(-currentRay.direction,currentHitInfo.normal,sourceIOR,1.6));
#else
      // Put your Fresnel code in the ifdef above 
#endif      

      Ray nextRay;


#ifdef SOLUTION_REFLECTION_REFRACTION
		nextRay.origin = currentHitInfo.position;
		vec3 n = normalize(currentHitInfo.normal);
		//vec3 e = -normalize(initialRay.origin + currentHitInfo.t * initialRay.direction);
		vec3 e = -currentRay.direction;
		float cosa = dot(n, e);
	    // track IORs
	    float ior; // η_12
	    if (currentHitInfo.enteringPrimitive){ // the currentIOR is changed back to the air/vacuum
		  float object_ior = currentHitInfo.material.ior;
	      ior = 1.0 / object_ior;
	    }	
	    else{
		  ior = currentHitInfo.material.ior;
		}	
		currentIOR = currentHitInfo.material.ior; //update ior
	    // t = -ηe + n(η x cosa - sqrt(1 + η^2 x (cos^2(a) - 1)))	  
	    float root = 1.0 + ior*ior * (cosa * cosa - 1.0);
	    if (root >= 0.0 ){
		    vec3 t_direction = -ior * e + (ior * cosa - sqrt(root)) * n;
		    vec3 t_origin = currentHitInfo.position;
		    nextRay.origin = t_origin;
	        nextRay.direction = t_direction;
			currentRay = nextRay;
			}
		else {
			break;
		}
	   currentRay = nextRay;
		
#else
      float sourceIOR;
	  float destIOR;
	// Put your code to compute the reflection ray and track the IOR in the ifdef above
#endif
      currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);
            
      result += refractionWeight * shade(scene, currentRay, currentHitInfo);
      
      if(!currentHitInfo.hit) break;
    }
  return result;
}

Material getDefaultMaterial() {
  return Material(vec3(0.3), vec3(0), 0.0, 0.0, 0.0, 0.0);
}

Material getPaperMaterial() {
  return Material(vec3(0.7, 0.7, 0.7), vec3(0, 0, 0), 5.0, 0.0, 0.0, 0.0);
}

Material getPlasticMaterial() {
	return Material(vec3(0.9, 0.3, 0.1), vec3(1.0), 10.0, 0.9, 0.0, 0.0);
}

Material getGlassMaterial() {
	return Material(vec3(0.0), vec3(0.0), 5.0, 1.0, 1.0, 1.5);
}

Material getSteelMirrorMaterial() {
	return Material(vec3(0.1), vec3(0.3), 20.0, 0.8, 0.0, 0.0);
}

Material getMetaMaterial() {
	return Material(vec3(0.1, 0.2, 0.5), vec3(0.3, 0.7, 0.9), 20.0, 0.8, 0.0, 0.0);
}

vec3 tonemap(const vec3 radiance) {
  const float monitorGamma = 2.0;
  return pow(radiance, vec3(1.0 / monitorGamma));
}

void main() {
	// Setup scene
	Scene scene;
	scene.ambient = vec3(0.12, 0.15, 0.2);

	scene.lights[0].position = vec3(5, 15, -5);
	scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);

	scene.lights[1].position = vec3(-15, 5, 2);
	scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);

	// Primitives
    bool soloBoolean = false;
	
	#ifdef SOLUTION_BOOLEAN
	soloBoolean = true;
	#endif

	if(!soloBoolean) {
		scene.spheres[0].position            	= vec3(10, -5, -16);
		scene.spheres[0].radius              	= 6.0;
		scene.spheres[0].material 				= getPaperMaterial();

		scene.spheres[1].position            	= vec3(-7, -2, -13);
		scene.spheres[1].radius             	= 4.0;
		scene.spheres[1].material				= getPlasticMaterial();

		scene.spheres[2].position            	= vec3(0, 0.5, -5);
		scene.spheres[2].radius              	= 2.0;
		scene.spheres[2].material   			= getGlassMaterial();

		scene.planes[0].normal            		= normalize(vec3(0, 1.0, 0));
		scene.planes[0].d              			= -4.5;
		scene.planes[0].material				= getSteelMirrorMaterial();

		scene.cylinders[0].position            	= vec3(-1, 1, -26);
		scene.cylinders[0].direction            = normalize(vec3(-2, 2, -1));
		scene.cylinders[0].radius         		= 1.5;
		scene.cylinders[0].material				= getPaperMaterial();

		scene.cylinders[1].position            	= vec3(4, 1, -5);
		scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
		scene.cylinders[1].radius         		= 0.4;
		scene.cylinders[1].material				= getPlasticMaterial();

	} else {
		scene.booleans[0].mode = BOOLEAN_MODE_MINUS;
		
		// sphere A 
		scene.booleans[0].spheres[0].position      	= vec3(3, 0, -10);
		scene.booleans[0].spheres[0].radius      	= 2.75;
		scene.booleans[0].spheres[0].material      	= getPaperMaterial();
		
		// sphere B
		scene.booleans[0].spheres[1].position      	= vec3(6, 1, -13);	
		scene.booleans[0].spheres[1].radius      	= 4.0;
		scene.booleans[0].spheres[1].material      	= getPaperMaterial();
		
		
		scene.booleans[1].mode = BOOLEAN_MODE_AND;
		
		scene.booleans[1].spheres[0].position      	= vec3(-3.0, 1, -12);
		scene.booleans[1].spheres[0].radius      	= 4.0;
		scene.booleans[1].spheres[0].material      	= getPaperMaterial();
		
		scene.booleans[1].spheres[1].position      	= vec3(-6.0, 1, -12);	
		scene.booleans[1].spheres[1].radius      	= 4.0;
		scene.booleans[1].spheres[1].material      	= getMetaMaterial();
		

		scene.planes[0].normal            		= normalize(vec3(0, 0.8, 0));
		scene.planes[0].d              			= -4.5;
		scene.planes[0].material				= getSteelMirrorMaterial();
		
		scene.lights[0].position = vec3(-5, 25, -5);
		scene.lights[0].color    = vec3(0.9, 0.5, 0.1);

		scene.lights[1].position = vec3(-15, 5, 2);
		scene.lights[1].color    = 0.0 * 0.5 * vec3(0.1, 0.3, 1.0);
		
	}

	// Compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {  
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
	
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.uniform2iv(gl.getUniformLocation(this.shaderProgram, "viewport"), [getRenderTargetWidth(), getRenderTargetHeight()]);

	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}

